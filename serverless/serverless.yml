# serverless.yml
plugins:
  - serverless-finch
  - serverless-domain-manager  
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list  
  - serverless-webpack

service: bookinbot-application

custom:
  cognitoPoolArn: ${env:COGNITOPOOLARN}
  cognitoAuthorizer:
    arn: ${self:custom.cognitoPoolArn}

  customDomain:
    domainName: api.${env:DOMAINNAME}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true    

  client:
    bucketName: '${self:provider.url}-dist'
    distributionFolder: ../dist 
    indexDocument: index.html 
    errorDocument: index.html 
  tableNameResources: 'bookinbot-resources'    
  tableNameBookings: 'bookinbot-bookings'  
  tableNameUsers: 'bookinbot-users'
  tableNameUserGroups: 'bookinbot-usergroups' 
  accessKey: ${env:ACCESSKEY}
  secretKey: ${env:SECRETKEY}  
  dynamodb:
    start:
      migrate: true


provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  url: ${env:DOMAINNAME}    
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ResourcesDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["BookingsDynamoDBTable", "Arn"] }        
  environment:
    RESOURCES_TABLE: ${self:custom.tableNameResources}
    BOOKINGS_TABLE: ${self:custom.tableNameBookings}    
    USERS_TABLE: ${self:custom.tableNameUsers}    
    USERGROUPS_TABLE: ${self:custom.tableNameUserGroups}  
#    AWS_ACCESS_KEY: ${self:custom.accessKey}   
#    AWS_SECRET_KEY: ${self:custom.secretKey}       
              
functions:
  resources:
      handler: handler.process
      events: ${file(resources/resources.yml):events} 

resources:
  Resources:
    ResourcesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: ownerid
            AttributeType: S          
          - 
            AttributeName: id
            AttributeType: S
        KeySchema:
          - 
            AttributeName: ownerid
            KeyType: HASH          
          - 
            AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameResources}
    BookingsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: resourceid
            AttributeType: S
          - 
            AttributeName: id
            AttributeType: S            
        KeySchema:
          - 
            AttributeName: resourceid
            KeyType: HASH
          - 
            AttributeName: id
            KeyType: RANGE            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameBookings}
